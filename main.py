#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                           
#   ~ CyPay 1.0 beta ~                            
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# CoDeD: bY TSENKEO
# DaTe: 02/11/2021
# Dev: Python
#
#~~~~~~~~~~~ INFO ~~~~~~~~~~~~
#
# Sending Bitcoin in Telegram bot
#
#*****************************



import my_constants, re, secrets, string, datetime, pytz, sqlite3
from telebot import *
from bit import *
# from bit import PrivateKey as Key 
from bit import PrivateKeyTestnet as Key
from bit.network import currency_to_satoshi
from bit.network import satoshi_to_currency 


def create_base(db):
    cursor = db.cursor()
    cursor.execute(f'''CREATE TABLE IF NOT EXISTS "USERS"(user_id INTEGER, 
            private_key TEXT, 
            registration_date TEXT, 
            user_address TEXT, 
            last_transaction TEXT, 
            now_balance TEXT, 
            btc_balance TEXT, 
            usd_balance TEXT, 
            rub_balance TEXT, 
            status_date TEXT);'''
                    )
    db.commit()
    cursor.execute(f'''CREATE TABLE IF NOT EXISTS "TRANSACTION"(sender_id INTEGER,
            summ_in_btc TEXT,  
            address_accept TEXT,
            commission_network TEXT, 
            commission_bot TEXT, 
            datetime_transaction TEXT,
            status TEXT,  
            order_transaction TEXT,
            FOREIGN KEY("sender_id") REFERENCES "USERS"("user_id"));'''
                       )
    db.commit()
    print('Create DataBase')


with sqlite3.connect('db.db', check_same_thread=False) as db:
    db = db

create_base(db)

def cur():
    cursor = db.cursor()
    return cursor

def generate_crypt(len:int):
    len_and_dig = string.ascii_letters + string.digits
    crypt_string = ''.join(secrets.choice(len_and_dig) for i in range(len))
    return crypt_string

class select_db:
    def check_id_in_db(id:int):
        cursor = cur()
        cursor.execute(f'SELECT user_id FROM USERS WHERE "user_id" = "{id}";')
        data = cursor.fetchone()
        if data is None:
            return False
        elif id == data[0]:
            return True
    def private_key(user_id:int):
        cursor = cur()
        cursor.execute(f'SELECT private_key FROM USERS WHERE "user_id" = "{int(user_id)}"')
        data = cursor.fetchone()
        return data[0]
    def registration_date(user_id:int):
        cursor = cur()
        cursor.execute(f'SELECT registration_date FROM USERS WHERE "user_id" = "{int(user_id)}"')
        data = cursor.fetchone()
        return data[0]
    def user_address(user_id:int):
        cursor = cur()
        cursor.execute(f'SELECT user_address FROM USERS WHERE "user_id" = "{int(user_id)}"')
        data = cursor.fetchone()
        return data[0]
    class fin:
        def last_transaction(user_id:int):
            cursor = cur()
            cursor.execute(f'SELECT last_transaction FROM USERS WHERE "user_id" = "{int(user_id)}"')
            data = cursor.fetchone()
            return data[0]
        def now_balance(user_id:int):
            cursor = cur()
            cursor.execute(f'SELECT now_balance FROM USERS WHERE "user_id" = "{int(user_id)}"')
            data = cursor.fetchone()
            return data[0]
        def btc_balance(user_id:int):
            cursor = cur()
            cursor.execute(f'SELECT btc_balance FROM USERS WHERE "user_id" = "{int(user_id)}"')
            data = cursor.fetchone()
            return data[0]
        def usd_balance(user_id:int):
            cursor = cur()
            cursor.execute(f'SELECT usd_balance FROM USERS WHERE "user_id" = "{int(user_id)}"')
            data = cursor.fetchone()
            return data[0]
        def rub_balance(user_id:int):
            cursor = cur()
            cursor.execute(f'SELECT rub_balance FROM USERS WHERE "user_id" = "{int(user_id)}"')
            data = cursor.fetchone()
            return data[0]
        def status_date(user_id:int):
            cursor = cur()
            cursor.execute(f'SELECT status_date FROM USERS WHERE "user_id" = "{int(user_id)}"')
            data = cursor.fetchone()
            return data[0]


class add_db:
    def add_new_user(user_id:int):
        cursor = cur()
        key = Key()
        private_key = key.to_wif()
        d = datetime.now(pytz.timezone('Europe/Moscow'))
        registration_date = d.strftime('%d.%m.%Y %H:%M')
        user_address = key.address
        last_transaction = 'not'
        now_balance = key.get_balance()
        btc_balance = key.get_balance('btc')
        usd_balance = key.get_balance('usd')
        rub_balance = key.get_balance('rub')
        status_date = d.strftime('%d.%m.%Y %H:%M')
        d = (user_id, private_key,  registration_date, user_address,
            last_transaction, now_balance, btc_balance,
            usd_balance, rub_balance, status_date)
        cursor.execute('INSERT INTO "USERS" VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?);', d)
        db.commit()
        return True


    def add_own_key(key:str, user_id:int):
        try:
            key = Key(key)
            key = key.to_wif()
            cursor = cur()
            user_address = Key(key).address
            registration_date = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')
            cursor.executescript(f'''UPDATE USERS set "private_key" = "{key}" WHERE "user_id" = "{user_id}";
                                    UPDATE USERS set "registration_date" = "{registration_date}" WHERE "user_id" = "{user_id}";
                                    UPDATE USERS set "user_address" = "{user_address}" WHERE "user_id" = "{user_id}";''')
            db.commit()
            an = '‚úÖ *–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*'
        except ValueError and Exception as v:
            an = '‚ùå *–ö–ª—é—á –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!*\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
            print(v)
            if re.compile(r'^Decoded checksum ').findall(str(v)):
                print(an)
                an = '‚ùå *–ö–ª—é—á –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!*'
        return an
    def update_user_data(user_id:int):
        cursor = cur()
        key = Key(select_db.private_key(user_id=user_id))
        now_balance = key.get_balance()
        btc_balance = key.get_balance('btc')
        usd_balance = key.get_balance('usd')
        rub_balance = key.get_balance('rub')
        d = datetime.now(pytz.timezone('Europe/Moscow'))
        status_date = d.strftime('%H:%M %d.%m.%Y')
        cursor.executescript(f'''UPDATE USERS set "now_balance" = "{now_balance}" WHERE "user_id" = "{user_id}";
                                UPDATE USERS set "btc_balance" = "{btc_balance}" WHERE "user_id" = "{user_id}";
                                UPDATE USERS set "usd_balance" = "{usd_balance}" WHERE "user_id" = "{user_id}";
                                UPDATE USERS set "rub_balance" = "{rub_balance}" WHERE "user_id" = "{user_id}";
                                UPDATE USERS set "status_date" = "{status_date}" WHERE "user_id" = "{user_id}";''')
        db.commit()
        return True
    def transaction_address_and_id(sender_id:int, address_accept:str, order=str):
        cursor = cur()
        d = datetime.now(pytz.timezone('Europe/Moscow'))
        Date = str(d.strftime('%d.%m.%Y %H:%M:%S'))
        d = (sender_id, '-', address_accept, '-', '-', Date,  'create', order)
        cursor.execute('INSERT INTO "TRANSACTION" VALUES(?, ?, ?, ?, ?, ?, ?, ?);', d)
        db.commit()




bot = telebot.TeleBot(my_constants.token, parse_mode="Markdown")
while True:
    print('Connection with Telegram')


    class keyboards:
        def keyboard_start(address:str):
            keyboard_start = types.InlineKeyboardMarkup()
            callback_button_update = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –∏ –±–∞–ª–∞–Ω—Å', callback_data='start_update')
            callback_button_add_key = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—ÅÔ∏è', callback_data='add_key')
            callback_button_show_private_key = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –∫–ª—é—á üëÅ', callback_data='show_private_key')
            callback_button_trade = types.InlineKeyboardButton(text='–ü–æ–ø–æ–ª–Ω–∏—Ç—å/–≤—ã–≤–µ—Å—Ç–∏', callback_data='trade')
            callback_button_transaction = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ üí≥', callback_data='send')
            url_button_history = types.InlineKeyboardButton(text='–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π üßæ',
                                                            url=f'{my_constants.blockchain}{address}/')
            switch_button = types.InlineKeyboardButton(text='–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥Ô∏è', switch_inline_query='100 rub')
            keyboard_start.add(callback_button_update)
            keyboard_start.add(callback_button_show_private_key, callback_button_add_key)
            keyboard_start.add(callback_button_transaction, switch_button)
            keyboard_start.add(callback_button_trade)
            keyboard_start.add(url_button_history)
            return keyboard_start

  
        keyboard_send = types.InlineKeyboardMarkup()
        callback_button_yes = types.InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='yes_send')
        callback_button_no = types.InlineKeyboardButton(text='‚úñ–û—Ç–º–µ–Ω–∞', callback_data='no_send')
        keyboard_send.add(callback_button_yes)
        keyboard_send.add(callback_button_no)

        keyboard_sign = types.InlineKeyboardMarkup()
        callback_button_yes_terms = types.InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data='yes_terms')
        keyboard_sign.add(callback_button_yes_terms)


    def mailing(text:str):
        cursor = cur()
        cursor.execute('SELECT user_id FROM USERS')
        data = cursor.fetchall()
        print('–°—Ç–æ–ª—å–∫–æ —É —Ç–µ–±—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ', len(data))
        kol = 0
        block = ' '
        for i in range(0, len(data)):
            try:
                id = data[i][0]
                bot.send_message(chat_id=id, text=text)
                print('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ', id)
                kol = kol + 1
            except telebot.apihelper.ApiException:
                print('–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç ', id)
                block += f'\n`{id}`'
        f = f'*–ì–æ—Ç–æ–≤–æ!*\n\n*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}*\n\n*–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {kol}*\n\n*–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç (ID):*{block}'
        return f


    class transaction:
        def transaction(user_id:int, address:str, summ):
            balance = int(select_db.fin.now_balance(user_id))
            summ = int(summ)
            try:
                if balance < summ:
                    answer_None = f'*–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞:* ' \
                                  f'\n‚îî*{float(float(summ)/100000000.0)} BTC*' \
                                  f'\n\n*–í–∞—à –±–∞–ª–∞–Ω—Å:* ' \
                                  f'\n‚îî *{float(float(balance)/100000000.0)} BTC*' \
                                  f'\n\n*–£–º–µ–Ω—å—à–∏—Ç–µ —Å—É–º–º—É!*'
                    cursor = cur()
                    cursor.execute(f'UPDATE "TRANSACTION" set "status" = "False" WHERE "sender_id" = "{user_id}" and "summ_in_btc" = "{summ}" and "address_accept" = "{address}" and "status" = "create"')
                    db.commit()
                    return answer_None
                elif balance > summ:
                    summ = str(summ)
                    key = Key(select_db.private_key(user_id))
                    cursor = cur()
                    cursor.execute(f'SELECT * FROM "TRANSACTION" WHERE "sender_id" = "{user_id}" and "summ_in_btc" = "{summ}" and "address_accept" = "{address}" and "status" = "create"')
                    data = cursor.fetchone()
                    if data:
                        summ = int(summ)
                        address_to_send = data[2]
                        commisson_net = int(data[3])
                        commission_bot = int(data[4])
                        summ_without_comm = summ - commission_bot - commisson_net
                        transaction_id = key.send(
                            [(address_to_send, satoshi_to_currency(summ_without_comm, 'btc'), 'btc'),
                             (my_constants.btc_address_for_commission, satoshi_to_currency(commission_bot, 'btc'), 'btc')],
                            fee=commisson_net, absolute_fee=True)
                        if True:
                            answer_True = f'‚úÖ *–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Å–µ—Ç—å!*' \
                                          f'\n*ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:* ' \
                                          f'\n‚îî`{transaction_id}`' \
                                          f'\n\n*–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ò—Å—Ç–æ—Ä–∏—è¬ª*üëáüèª\n\n'
                            cursor = cur()
                            cursor.executescript(f'''UPDATE "TRANSACTION" set "status" = "executed" WHERE "sender_id" = "{user_id}" and "summ_in_btc" = "{summ}" and "address_accept" = "{address}" and "status" = "create";
                                                     UPDATE "USERS" set "last_transaction" = "{transaction_id}" WHERE "user_id" = "{user_id}";
                                                     UPDATE "USERS" set "last_transaction" = "{transaction_id}" WHERE "user_id" = "{user_id}";
                                                     UPDATE "USERS" set "last_transaction" = "{transaction_id}" WHERE "user_id" = "{user_id}";''')
                            db.commit()
                            mycommission = satoshi_to_currency(commission_bot, 'usd')
                            bot.send_message(chat_id=my_constants.main_admin, text=f'ü§ë *–ù–æ–≤—ã–π –¥–æ—Ö–æ–¥ ${mycommission} USD*')
                            return answer_True
                        else:
                            answer_Mistake = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.*'
                            bot.send_message(chat_id=my_constants.debug_account,
                                             text=f'‚ùå –ö—Ç–æ-—Ç–æ –Ω–µ—É–¥–∞—á–Ω–æ —Å–¥–µ–ª–∞–ª –ø–µ—Ä–µ–≤–æ–¥. ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`')
                            return answer_Mistake
            except Exception as e:
                cursor = cur()
                cursor.execute(f'UPDATE "TRANSACTION" set "status" = "Error {e}" WHERE "sender_id" = "{user_id}" and "summ_in_btc" = "{summ}" and "address_accept" = "{address}" and "status" = "create"')
                db.commit()
                answer_Error = f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —É–∂–µ —Ä–∞–∑–±–∏—Ä–∞—é—Ç—Å—è.'
                bot.send_message(chat_id=my_constants.debug_account,
                                 text=f'üö´ –ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id `{user_id}`) *–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞* `{e}`') 
                return answer_Error
        def send(user_id: int, address: str, summ):
            result = transaction.transaction(user_id, address, summ)
            return result




    @bot.message_handler(commands=['start'])
    def start_command(message):
        bot.delete_message(message.chat.id, message.message_id)
        parse_mode = '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*‚è≥'
        bot.send_message(message.chat.id, parse_mode)
        bot.send_chat_action(message.chat.id, 'typing')

        if re.compile(r'^/start \w{51}$').findall(message.text) and select_db.check_id_in_db(id=message.chat.id) is False:
                m = message.text
                m = m.split()
                start, hash = m
                parse_mode = f'üìÉ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({my_constants.terms}) –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —è –í–∞–º –∑–∞—á–∏—Å–ª—é BTC\n\n---\n\n{hash}'
                bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode, reply_markup=keyboards.keyboard_sign)

        elif select_db.check_id_in_db(id=message.chat.id) is False:
            parse_mode = f'üìÉ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å [–£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏]({my_constants.terms})'
            bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode,
                              reply_markup=keyboards.keyboard_sign)
        
        elif select_db.check_id_in_db(id=message.chat.id) is True:
            parse_mode = f'*–ü—Ä–∏–≤–µ—Ç, {message.chat.first_name}* üëã' \
                         f'\n\nüèõ *–¢–≤–æ–π BTC-–∞–¥—Ä–µ—Å:* ' \
                         f'\n‚îî`{select_db.user_address(user_id=message.chat.id)}`' \
                         f'\n\nüí∞*–ë–∞–ª–∞–Ω—Å:* ' \
                         f'\n*‚îú BTC {select_db.fin.btc_balance(user_id=message.chat.id)} ‚Çø*' \
                         f'\n*‚îú SAT {select_db.fin.now_balance(user_id=message.chat.id)} ‚Çø*' \
                         f'\nüïñ *–ü–æ –∫—É—Ä—Å—É –Ω–∞ {select_db.fin.status_date(user_id=message.chat.id)}:*' \
                         f'\n*‚îú USD {select_db.fin.usd_balance(user_id=message.chat.id)} $*' \
                         f'\n*‚îî RUB {select_db.fin.rub_balance(user_id=message.chat.id)} ‚ÇΩ*' \
                         f'\n\nüîë *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:' \
                         f'\n*‚îî* *\*\*\*\*\*\*' \
                         f'\n'
            kb = keyboards.keyboard_start(address=select_db.user_address(user_id=message.chat.id))
            bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode,
                                  reply_markup=kb)
            add_db.update_user_data(user_id=message.chat.id)
        
        if re.compile(r'^/start \w{51}$').findall(message.text) and select_db.check_id_in_db(id=message.chat.id) is True:
            m = message.text
            m = m.split()
            start, hash = m
            address = select_db.user_address(user_id=message.chat.id)
            cursor = cur()
            cursor.execute(f'''SELECT * FROM "TRANSACTION" WHERE "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
            data = cursor.fetchone()
            if data is not None:
                parse_mode = '*–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*‚è≥'
                bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode)
                sender_id = data[0]
                if sender_id == message.chat.id:
                    parse_mode = '*–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å BTC —Å–∞–º–æ–º—É —Å–µ–±–µ*'
                    bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode, reply_markup=kb)
                    cursor = cur()
                    cursor.execute(f'''UPDATE "TRANSACTION" set "status" = "False" WHERE "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
                    db.commit()
                else:
                    summ = data[1]
                    cursor = cur()
                    cursor.execute(f'''UPDATE "TRANSACTION" set "address_accept" = "{address}" WHERE "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
                    db.commit()
                    s = transaction.send(user_id=sender_id, address=address, summ=summ)
                    summ = float(float(summ) / 100000000.0)
                    bot.send_message(chat_id=sender_id, text=f'‚ûñ *–°–ø–∏—Å–∞–Ω–∏–µ –ø–æ –±—ã—Å—Ç—Ä–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É ‚Çø{summ} BTC*\n\n{s}')
                    parse_mode = f'‚úÖ {s}\n\nüëáüèª –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ'
                    bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode, reply_markup=kb)
            elif data is None:
                bot.send_message(chat_id=my_constants.debug_account, text=f'*–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å ID –ø–æ—Ä—É—á–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...*\n\n*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{message.chat.id}`\n\n*ID —Å–æ–æ–±—â–µ–Ω–∏—è:* `{message.message_id}`\n\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:* `{message.text}`')


    @bot.message_handler(commands=['help'])
    def help_command(message):
        bot.delete_message(message.chat.id, message.message_id)
        parse_mode = f'üîë*–ü–†–ò–í–ê–¢–ù–´–ô –ö–õ–Æ–ß*' \
                     f'\n\n–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–ª–∞–¥–µ–Ω–∏—è –±–∏—Ç–∫–æ–∏–Ω–∞–º–∏, ' \
                     f'—Ö—Ä–∞–Ω—è—â–∏–º–∏—Å—è –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∞–¥—Ä–µ—Å—É. –û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å ' \
                     f'—É–ø—Ä–∞–≤–ª—è—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π. –•—Ä–∞–Ω–∏—Ç–µ –µ–≥–æ –≤ —Ç–∞–π–Ω–µ.' \
                     f'\n\n_–í—ã –º–æ–∂–µ—Ç–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–≤–æ–π –∞–¥—Ä–µ—Å: ' \
                     f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π_ *–î–æ–±–∞–≤–∏—Ç—å –∞–¥—Ä–µ—Å* _–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á ' \
                     f'(–æ–Ω –±—É–¥–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏ –Ω–∏–∫—Ç–æ –∫—Ä–æ–º–µ –í–∞—Å –Ω–µ –±—É–¥–µ—Ç –∏–º–µ—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø)_' \
                     f'\n\n–í—ã –º–æ–∂–µ—Ç–µ, –Ω–∞–æ–±–æ—Ä–æ—Ç, —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ ' \
                     f'–∫–ª—é—á–∞ –≤ blockchain.com [–ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏](https://telegra.ph/EHksport-BTC-adresa-v-blockchaincom-10-23)' \
                     f'\n\nüí∞*–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ò –í–´–í–û–î*\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ' \
                     f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [–æ–±–º–µ–Ω–Ω–∏–∫–∞–º–∏](https://bits.media/exchanger/monitoring/sberrub/btc/) –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å –¥—Ä—É–≥–æ–≥–æ BTC-–∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å. ' \
                     f'–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å, –Ω–∞–∂–º–∏—Ç–µ *–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –∏ –±–∞–ª–∞–Ω—Å*' \
                     f'\n\nüí≥*–ü–ï–†–ï–í–û–î*' \
                     f'\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ BTC-–∞–¥—Ä–µ—Å ‚Äì –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π *–ü–µ—Ä–µ–≤–µ—Å—Ç–∏* üí≥ ' \
                     f'\n\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Inline-—Ä–µ–∂–∏–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø–æ—Ä—É—á–µ–Ω–∏–π: ' \
                     f'–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–º —á–∞—Ç–µ –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞ @{my_constants.nickname_bot} ' \
                     f'–∏ —Å—É–º–º—É –≤ –≤–∞–ª—é—Ç–µ, ' \
                     f'_(–Ω–∞–ø—Ä–∏–º–µ—Ä 100 rub)_ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–∫–Ω–æ ' \
                     f'—Å –∫–æ–º–∏—Å—Å–∏–µ–π ‚Äì –≤ —á–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, ' \
                     f'–ø–µ—Ä–µ–π–¥—è –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –í–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å (–µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ–≥–æ –Ω–µ—Ç ' \
                     f'- –º—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º).'
        kb = keyboards.keyboard_start(address=select_db.user_address(user_id=message.chat.id))
        bot.send_message(message.chat.id, text=parse_mode, reply_markup=kb)


    @bot.message_handler(commands=['stat'])
    def stat_command(message):
        if int(message.from_user.id) == my_constants.main_admin or int(message.from_user.id) in my_constants.admin_id:
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, text='*–ü–æ–¥–æ–∂–¥–∏—Ç–µ...*‚è≥')
            try:
                cursor = cur()
                cursor.execute('SELECT user_id FROM USERS')
                data = cursor.fetchall()
                users = len(data)
                cursor.execute('SELECT "now_balance" FROM "USERS"')
                t = cursor.fetchall()
                t = [int(d) for (d,) in t]
                t = sum(t)
                users_balance = satoshi_to_currency(t, 'usd')
                cursor.execute('SELECT summ_in_btc FROM "TRANSACTION" WHERE "status" = "executed"')
                t = cursor.fetchall()
                t = [int(d) for (d,) in t]
                t = sum(t)
                transaction = satoshi_to_currency(t, 'usd')
                cursor.execute('SELECT "commission_bot" FROM "TRANSACTION" WHERE "status" = "executed"')
                t = cursor.fetchall()
                t = [int(d) for (d,) in t]
                t = sum(t)
                profit = satoshi_to_currency(t, 'usd')
                parse_mode = f'üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*' \
                              f'\n*‚îî {users}*' \
                              f'\n\nüí∞*–£ –Ω–∏—Ö –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:*' \
                              f'\n*‚îî ${users_balance} USD*' \
                              f'\n\nüí≥ *–°–æ–≤–µ—Ä—à–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–∞ —Å—É–º–º—É:*' \
                              f'\n*‚îî ${transaction} USD*' \
                              f'\n\nü§ë *–¢–≤–æ–π –¥–æ—Ö–æ–¥:*' \
                              f'\n*‚îî ${profit} USD*'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=message.chat.id))
                bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode,
                                        reply_markup=kb)
            except Exception as e:
                parse_mode = f'*–û—à–∏–±–∫–∞*\n---------------\n{e}\n------------------------'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=message.chat.id))
                bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode,
                                      reply_markup=kb)


    @bot.message_handler(commands=['mailing'])
    def mailing_command(message):
        if int(message.chat.id) in my_constants.admin_id or int(message.chat.id) == my_constants.main_admin:
            parse_mode = f'üì© *–û—Ç–ø—Ä–∞–≤—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (Parse mode) —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º*'
            k = types.ForceReply()
            bot.delete_message(message.chat.id, message.message_id)
            bot.send_message(message.chat.id, text=parse_mode,
                            reply_markup=k)



    @bot.message_handler(content_types=['text'])
    def text_message(message):
        try:
            if message.reply_to_message.text == '–û—Ç–ø—Ä–∞–≤—å BTC-–∞–¥—Ä–µ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å ‚û°Ô∏è' and re.compile(r'^\w+$').findall(message.text):
                address_to_send = message.text
                add_db.transaction_address_and_id(sender_id=message.chat.id, address_accept=address_to_send, order='None')
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message.message_id - 1)
                parse_mode = '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ*...‚è≥'
                bot.send_message(message.chat.id, parse_mode)
                parse_mode = f'*–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* ' \
                             f'\n‚îî`{address_to_send}`' \
                             f'\n\nüí∞–ë–∞–ª–∞–Ω—Å:' \
                             f'\n*‚îú BTC {select_db.fin.btc_balance(user_id=message.chat.id)} ‚Çø*' \
                             f'\n*‚îú SAT {select_db.fin.now_balance(user_id=message.chat.id)} ‚Çø*' \
                             f'\n*‚îú USD {select_db.fin.usd_balance(user_id=message.chat.id)} $*' \
                             f'\n*‚îî RUB {select_db.fin.rub_balance(user_id=message.chat.id)} ‚ÇΩ*' \
                             f'\n\n*–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏ {my_constants.size_commission_network_in_procent}%*' \
                             f'\n*–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞ {my_constants.size_commission_bot_in_procent}%*'
                bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode)
                k = types.ForceReply()
                parse_mode = '‚û°Ô∏è –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, _50 usd_'
                bot.send_message(message.chat.id, text=parse_mode, reply_markup=k)
            elif message.reply_to_message.text == '‚û°Ô∏è –ù–∞–ø–∏—à–∏ —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, 50 usd' and re.compile(r'^(\d+|\d+.\d+)\s\w{3}$').findall(message.text):
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message.message_id - 1)
                bot.delete_message(message.chat.id, message.message_id - 2)
                parse_mode = '*–ü—Ä–æ–≤–µ—Ä—è—é –±–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å—á–∏—Ç—ã–≤–∞—é —Ä–∞–∑–º–µ—Ä –∫–æ–º–∏—Å—Å–∏–π.*‚è≥'
                bot.send_message(message.chat.id, parse_mode)

                m = message.text.strip()
                m = m.split()
                summ, currency = m
                v = ('btc', 'sat', 'rub', 'usd', 'eur', 'gdp', 'jpy', 'chy', 'cad', 'aud', 'nzd', 'brl', 'chf', 'sek', 'dkk', 'isk', 'pln',
                'hkd', 'krw', 'sgd', 'thb', 'twd')
                if currency in v:
                    summ_ms = summ
                    btc_balance = select_db.fin.now_balance(user_id=message.from_user.id)
                    if currency == 'btc':
                        balance = float(select_db.fin.now_balance(user_id=message.from_user.id)) / 100000000.0
                        summ_btc = int(float(summ) * 100000000.0)
                        c = int(summ_btc) / 100
                        c_net = c * float(my_constants.size_commission_network_in_procent)
                        c_my = c * float(my_constants.size_commission_bot_in_procent)
                        size_com_n = int(c_net)
                        size_com_b = int(c_my)
                        size_com_n_in_cur = float(float(size_com_n) / 100000000.0)
                        size_com_b_in_cur = float(float(size_com_b) / 100000000.0)
                    elif currency == 'sat':
                        balance = select_db.fin.now_balance(user_id=message.from_user.id)
                        summ_btc = int(summ)
                        c = int(summ_btc) / 100
                        c_net = c * float(my_constants.size_commission_network_in_procent)
                        c_my = c * float(my_constants.size_commission_bot_in_procent)
                        size_com_n = int(c_net)
                        size_com_b = int(c_my)
                        size_com_n_in_cur = size_com_n
                        size_com_b_in_cur = size_com_b
                    elif currency != 'sat' and currency != 'btc':
                        summ_btc = int(currency_to_satoshi(summ, currency))
                        key = Key(select_db.private_key(user_id=message.from_user.id))
                        balance = key.get_balance(currency)
                        c = int(summ_btc) / 100
                        c_net = c * float(my_constants.size_commission_network_in_procent)
                        c_my = c * float(my_constants.size_commission_bot_in_procent)
                        size_com_n = int(c_net)
                        size_com_b = int(c_my)
                        size_com_n_in_cur = satoshi_to_currency(size_com_n, currency)
                        size_com_b_in_cur = satoshi_to_currency(size_com_b, currency)
                    cursor = cur()
                    cursor.execute(f'''SELECT "address_accept" FROM "TRANSACTION" WHERE "sender_id" = "{message.chat.id}" and "status" = "create" and "order_transaction" = "None";''')
                    data = cursor.fetchone()
                    address_to_send = data[0]
                    if int(btc_balance) > int(summ_btc):
                        cursor.executescript(f'''UPDATE "TRANSACTION" set "summ_in_btc" = "{summ_btc}" WHERE "sender_id" = "{message.chat.id}" and "commission_network" = "-" and "status" = "create";
                                                 UPDATE "TRANSACTION" set "commission_network" = "{size_com_n}" WHERE "sender_id" = "{message.chat.id}" and "summ_in_btc" = "{summ_btc}" and "status" = "create";
                                                 UPDATE "TRANSACTION" set "commission_bot" = "{size_com_b}" WHERE "sender_id" = "{message.chat.id}" and "summ_in_btc" = "{summ_btc}" and "status" = "create";''')
                        db.commit()
                        parse_mode = f'‚û°Ô∏è *–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ {summ_btc} SAT* _({summ_ms} {currency.upper()})_ *–ø–æ –∞–¥—Ä–µ—Å—É:* ' \
                                     f'\n`{address_to_send}`' \
                                     f'\n\nüí∞ *–ë–∞–ª–∞–Ω—Å –≤ {currency.upper()}*:' \
                                     f'\n*‚îî {balance}*' \
                                     f'\n\nüßæ *–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏:* ' \
                                     f'\n*‚îú {size_com_n} SAT* _({size_com_n_in_cur} {currency.upper()})_' \
                                     f'\nüßæ *–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞:* ' \
                                     f'\n*‚îî {size_com_b} SAT* _({size_com_b_in_cur} {currency.upper()})_'
                        bot.delete_message(message.chat.id, message.message_id + 1)
                        bot.send_message(message.chat.id, text=parse_mode, reply_markup=keyboards.keyboard_send)
                    elif int(btc_balance) < int(summ_btc):
                        parse_mode = f'*–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.*'
                        kb = keyboards.keyboard_start(address=select_db.user_address(user_id=message.from_user.id))
                        bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1),
                                              text=parse_mode, reply_markup=kb)
                        cursor.execute(f'UPDATE "TRANSACTION" set "status" = "False" WHERE "sender_id" = "{message.from_user.id}" and "address_accept" = "{address_to_send}" and "status" = "create";')
                        db.commit()
                    else:
                        parse_mode = '*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.* –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—É—é –≤–∞–ª—é—Ç—É.'
                        bot.delete_message(message.chat.id, message.message_id + 1)
                        bot.send_message(message.chat.id, text=parse_mode)
            
            elif message.reply_to_message.text == 'üì© –û—Ç–ø—Ä–∞–≤—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π (Parse mode) —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
                m = message.json
                text = m['text']
                parse_mode = f'üëÄ*–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–æ—Ç —Ç–∞–∫:*\n---------\n{text}\n---------'
                bot.send_message(message.chat.id, text=parse_mode)
                keyboard_mailing = types.InlineKeyboardMarkup()
                button_information = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º  —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç?', callback_data=' ')
                callback_button_send_mailing = types.InlineKeyboardButton(text='‚úÖ –î–∞', callback_data='send_mailing')
                keyboard_mailing.add(button_information)
                keyboard_mailing.add(callback_button_send_mailing)
                parse_mode = f'`{text}`'
                bot.send_message(message.chat.id, text=parse_mode, reply_markup=keyboard_mailing)

            elif message.reply_to_message.text == '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ‚û°Ô∏è' and re.compile(r'^\w+$').findall(message.text):
                m = message.json
                key = m['text']
                key = key.strip()
                bot.delete_message(chat_id=message.chat.id, message_id=(int(message.message_id) - 1))
                bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
                bot.send_message(chat_id=my_constants.debug_account, text=f'*–æ–¥–∏–Ω –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª –∫–ª—é—á*')
                parse_mode = '*–ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á*...‚è≥'
                bot.send_message(message.chat.id, parse_mode)
                k = add_db.add_own_key(key=key, user_id=message.from_user.id)
                parse_mode = k
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=message.chat.id))
                bot.edit_message_text(chat_id=message.chat.id, message_id=(int(message.message_id) + 2), text=parse_mode,
                                      reply_markup=kb)
            else:
                print(message.json)
        except AttributeError as a:
            print(a)
        except Exception as e:
            m = message.json
            m = m['text']
            parse_mode = f'‚ùå *–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞*' \
                         f'\n‚îî `{e}`' \
                         f'\n*ID –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–ª—è:* `{message.chat.id}`' \
                         f'\n\n*ID —Å–æ–æ–±—â–µ–Ω–∏—è:*' \
                         f'\n‚îî `{message.message_id}`' \
                         f'\n*Te–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:* ' \
                         f'\n‚îî `{m}`'
            bot.send_message(chat_id=my_constants.debug_account, text=parse_mode)
            bot.delete_message(message.chat.id, message.message_id)
            parse_mode = f'*–Ø –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª.*'
            print(e)
            bot.edit_message_text(chat_id=message.chat.id, message_id=(message.message_id + 1), text=parse_mode)



    @bot.callback_query_handler(func=lambda call: True)
    def call_button_and_inline(call):
        if call.message:
            if call.data == 'yes_terms' and re.compile(r'^üìÉ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –£—Å–ª–æ–≤–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —è –í–∞–º –∑–∞—á–∏—Å–ª—é BTC\n\n---\n\n\w{51}$').findall((call.message.text)) and select_db.check_id_in_db(id=call.message.chat.id) is False:
                    parse_mode = f'*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á –∏ –∞–¥—Ä–µ—Å...*‚è≥'
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                          text=parse_mode)
                    add_db.add_new_user(user_id=call.from_user.id)
                    h = re.compile(r'\w{51}$').findall((call.message.text))
                    hash = h[0]
                    address = select_db.user_address(user_id=call.message.chat.id)
                    cursor = cur()
                    cursor.execute(f'''SELECT * FROM "TRANSACTION" WHERE "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
                    data = cursor.fetchone()
                    kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                    if data is not None:
                        parse_mode = '*–ü—Ä–æ–≤–µ—Ä—è—é –¥–∞–Ω–Ω—ã–µ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*‚è≥'
                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=parse_mode)
                        sender_id = data[0]
                        if sender_id == call.message.chat.id:
                            parse_mode = '*–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å BTC —Å–∞–º–æ–º—É —Å–µ–±–µ*'
                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                  text=parse_mode, reply_markup=kb)
                            cursor = cur()
                            cursor.execute(f'''UPDATE "TRANSACTION" set "status" = "False" WHERE "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
                            db.commit()
                        else:
                            summ = data[1]
                            cursor = cur()
                            cursor.execute(f'''UPDATE "TRANSACTION" set "address_accept" = "{address}" WHERE "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
                            db.commit()
                            s = transaction.send(user_id=sender_id, address=address, summ=summ)
                            summ = float(float(summ) / 100000000.0)
                            bot.send_message(chat_id=sender_id, text=f'‚ûñ *–°–ø–∏—Å–∞–Ω–∏–µ –ø–æ –±—ã—Å—Ç—Ä–æ–º—É –ø–µ—Ä–µ–≤–æ–¥—É ‚Çø{summ} BTC*\n\n{s}')
                            parse_mode = f'‚úÖ {s}\n\nüëáüèª –û–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ'
                            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                                  text=parse_mode, reply_markup=kb)
                    elif data is None:
                        bot.send_message(chat_id=my_constants.debug_account,
                                         text=f'*–ö—Ç–æ-—Ç–æ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥–æ–±—Ä–∞—Ç—å ID –ø–æ—Ä—É—á–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...*\n\n*ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{call.message.chat.id}`\n\n*ID —Å–æ–æ–±—â–µ–Ω–∏—è:* `{call.message.message_id}`\n\n*–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:* `{call.message.text}`')
            if call.data == 'yes_terms' and select_db.check_id_in_db(id=call.message.chat.id) is False:
                parse_mode = f'*–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á –∏ –∞–¥—Ä–µ—Å...*‚è≥'
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=parse_mode)
                add_db.add_new_user(user_id=call.from_user.id)
                parse_mode = f'*–ü—Ä–∏–≤–µ—Ç, {call.message.chat.first_name}* üëã' \
                             f'\n\nüèõ *–¢–≤–æ–π BTC-–∞–¥—Ä–µ—Å:* ' \
                             f'\n‚îî`{select_db.user_address(user_id=call.message.chat.id)}`' \
                             f'\n\nüí∞*–ë–∞–ª–∞–Ω—Å:* ' \
                             f'\n*‚îú BTC {select_db.fin.btc_balance(user_id=call.message.chat.id)} ‚Çø*' \
                             f'\n*‚îú SAT {select_db.fin.now_balance(user_id=call.message.chat.id)} ‚Çø*' \
                             f'\nüïñ *–ü–æ –∫—É—Ä—Å—É –Ω–∞ {select_db.fin.status_date(user_id=call.message.chat.id)}:*' \
                             f'\n*‚îú USD {select_db.fin.usd_balance(user_id=call.message.chat.id)} $*' \
                             f'\n*‚îî RUB {select_db.fin.rub_balance(user_id=call.message.chat.id)} ‚ÇΩ*' \
                             f'\n\nüîë *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:' \
                             f'\n*‚îî**\*\*\*\*\*\*' \
                             f'\n\n*–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏–∏, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ* /help' \
                             f'\n'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=parse_mode,
                                      reply_markup=kb)



            elif call.data == 'send_mailing':
                m = call.message.json
                text = m['text']
                m = mailing(text=text)
                parse_mode = m
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=parse_mode)
            elif call.data == 'start_update':
                parse_mode = '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...*‚è≥\n\n–ï—Å–ª–∏ —è –Ω–µ –æ—Ç–≤–µ—á–∞—é –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start'
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=parse_mode)
                add_db.update_user_data(call.message.chat.id)
                if True:
                    parse_mode = f'*–ü—Ä–∏–≤–µ—Ç, {call.message.chat.first_name}* üëã' \
                         f'\n\nüèõ *–¢–≤–æ–π BTC-–∞–¥—Ä–µ—Å:* ' \
                         f'\n‚îî`{select_db.user_address(user_id=call.message.chat.id)}`' \
                         f'\n\nüí∞*–ë–∞–ª–∞–Ω—Å:* ' \
                         f'\n*‚îú BTC {select_db.fin.btc_balance(user_id=call.message.chat.id)} ‚Çø*' \
                         f'\n*‚îú SAT {select_db.fin.now_balance(user_id=call.message.chat.id)} ‚Çø*' \
                         f'\nüïñ *–ü–æ –∫—É—Ä—Å—É –Ω–∞ {select_db.fin.status_date(user_id=call.message.chat.id)}:*' \
                         f'\n*‚îú USD {select_db.fin.usd_balance(user_id=call.message.chat.id)} $*' \
                         f'\n*‚îî RUB {select_db.fin.rub_balance(user_id=call.message.chat.id)} ‚ÇΩ*' \
                         f'\n\nüîë *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:' \
                         f'\n*‚îî**\*\*\*\*\*\*'
                    kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=parse_mode,
                                          reply_markup=kb)
            elif call.data == 'show_private_key':
                parse_mode = f'*–ü—Ä–∏–≤–µ—Ç, {call.message.chat.first_name}* üëã' \
                             f'\n\nüèõ *–¢–≤–æ–π BTC-–∞–¥—Ä–µ—Å:* ' \
                             f'\n‚îî`{select_db.user_address(user_id=call.message.chat.id)}`' \
                             f'\n\nüí∞*–ë–∞–ª–∞–Ω—Å:* ' \
                             f'\n*‚îú BTC {select_db.fin.btc_balance(user_id=call.message.chat.id)} ‚Çø*' \
                             f'\n*‚îú SAT {select_db.fin.now_balance(user_id=call.message.chat.id)} ‚Çø*' \
                             f'\nüïñ *–ü–æ –∫—É—Ä—Å—É –Ω–∞ {select_db.fin.status_date(user_id=call.message.chat.id)}:*' \
                             f'\n*‚îú USD {select_db.fin.usd_balance(user_id=call.message.chat.id)} $*' \
                             f'\n*‚îî RUB {select_db.fin.rub_balance(user_id=call.message.chat.id)} ‚ÇΩ*' \
                             f'\n\nüîë *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:* ' \
                             f'\n*‚îî* `{select_db.private_key(user_id=call.message.chat.id)}`' \
                             f'\nüîì *–•—Ä–∞–Ω–∏ –µ–≥–æ –≤ —Ç–∞–π–Ω–µ –∏ –Ω–∏–∫–æ–º—É –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π!*'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=parse_mode, reply_markup=kb)
                time.sleep(20)
                parse_mode = f'*–ü—Ä–∏–≤–µ—Ç, {call.message.chat.first_name}* üëã' \
                         f'\n\nüèõ *–¢–≤–æ–π BTC-–∞–¥—Ä–µ—Å:* ' \
                         f'\n‚îî`{select_db.user_address(user_id=call.message.chat.id)}`' \
                         f'\n\nüí∞*–ë–∞–ª–∞–Ω—Å:* ' \
                         f'\n*‚îú BTC {select_db.fin.btc_balance(user_id=call.message.chat.id)} ‚Çø*' \
                         f'\n*‚îú SAT {select_db.fin.now_balance(user_id=call.message.chat.id)} ‚Çø*' \
                         f'\nüïñ *–ü–æ –∫—É—Ä—Å—É –Ω–∞ {select_db.fin.status_date(user_id=call.message.chat.id)}:*' \
                         f'\n*‚îú USD {select_db.fin.usd_balance(user_id=call.message.chat.id)} $*' \
                         f'\n*‚îî RUB {select_db.fin.rub_balance(user_id=call.message.chat.id)} ‚ÇΩ*' \
                         f'\n\nüîë *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:' \
                         f'\n*‚îú* *\*\*\*\*\*\*' \
                         f'\nüîí *–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á —Å–∫—Ä—ã—Ç*'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=parse_mode,
                                      reply_markup=kb)
            elif call.data == 'send':
                parse_mode = f'–û—Ç–ø—Ä–∞–≤—å *BTC-–∞–¥—Ä–µ—Å*, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å ‚û°Ô∏è'
                k = types.ForceReply()
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, text=parse_mode,
                                      reply_markup=k)
            elif call.data == 'add_key':
                parse_mode = f'–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ *–ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á* –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ‚û°Ô∏è'
                k = types.ForceReply()
                bot.delete_message(call.message.chat.id, call.message.message_id)
                bot.send_message(call.message.chat.id, text=parse_mode,
                                 reply_markup=k)

            elif call.data == 'yes_send':
                m = call.message.json
                m = m['text']
                m = m.split()
                data = m
                summ = data[4]
                address = data[10]
                w = transaction.send(user_id=int(call.message.chat.id), address=address, summ=summ)
                bot.answer_callback_query(callback_query_id=call.id, text='–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞', show_alert=True)
                bot.send_chat_action(call.message.chat.id, 'typing')
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                parse_mode = '*–û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Å–µ—Ç—å...*‚è≥'
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=parse_mode)
                parse_mode = w
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=parse_mode, reply_markup=kb)
            elif call.data == 'no_send':
                m = call.message.json
                m = m['text']
                m = m.split()
                data = m
                summ = data[4]
                address = data[10]
                cursor = cur()
                cursor.execute(f'''UPDATE "TRANSACTION" set "status" = "cancel" WHERE "sender_id" = "{call.message.chat.id}" and "summ_in_btc" = "{summ}" and "address_accept" = "{address}" and "status" = "create"''')
                parse_mode = '*–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞* ‚úñÔ∏è \n\n'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=parse_mode, reply_markup=kb)
            elif call.data == 'trade':
                parse_mode = f'üí∞*–ü–û–ü–û–õ–ù–ï–ù–ò–ï –ò –í–´–í–û–î*\n\n–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ ' \
                             f'–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å [–æ–±–º–µ–Ω–Ω–∏–∫–∞–º–∏](https://bits.media/exchanger/monitoring/sberrub/btc/) –∏–ª–∏ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å –¥—Ä—É–≥–æ–≥–æ BTC-–∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å–≤–æ–π –∞–¥—Ä–µ—Å (–¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–æ–≤–Ω–æ –Ω–∞–æ–±–æ—Ä–æ—Ç).' \
                             f' –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–¥—Ä–µ—Å, –Ω–∞–∂–º–∏—Ç–µ *–û–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å –∏ –±–∞–ª–∞–Ω—Å*' \
                             f'\n\n–í—ã –º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∞–¥—Ä–µ—Å —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ ' \
                             f'–∫–ª—é—á–∞ –≤ blockchain.com [–ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏](https://telegra.ph/EHksport-BTC-adresa-v-blockchaincom-10-23) –∏–ª–∏ –≤ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ—à–µ–ª–µ–∫, –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å/–ø—Ä–æ–¥–∞–≤–∞—Ç—å BTC –∏ —Ç–∞–º —Å–æ–≤–µ—Ä—à–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Å–¥–µ–ª–∫–∏.'
                kb = keyboards.keyboard_start(address=select_db.user_address(user_id=call.message.chat.id))
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=parse_mode, reply_markup=kb)


    @bot.inline_handler(func=lambda query: len(query.query) == 0 or len(query.query) >= 0)
    def handler(query):
        @bot.chosen_inline_handler(func=lambda selected_inline_result: True)
        def handler_query(query):
            if select_db.check_id_in_db(id=query.from_user.id) is True:
                if len(query.query) == 0:
                    try:
                        address = select_db.user_address(user_id=query.from_user.id)
                        btc = str(select_db.fin.btc_balance(user_id=query.from_user.id))
                        sat = str(select_db.fin.now_balance(user_id=query.from_user.id))
                        usd = str(select_db.fin.usd_balance(user_id=query.from_user.id))
                        rub = str(select_db.fin.rub_balance(user_id=query.from_user.id))
                        balance = f'BTC {btc} ‚Çø ' \
                                    f'| SAT {sat} ‚Çø ' \
                                    f'\nUSD {usd} $ ' \
                                    f'| RUB {rub} ‚ÇΩ'
                        answer_text = f'üèõ *–¢–≤–æ–π BTC-–∞–¥—Ä–µ—Å:*' \
                                    f'\n*‚îî*`{address}`' \
                                    f'\n\nüí∞*–ë–∞–ª–∞–Ω—Å:*' \
                                    f'\n*‚îú BTC {btc} ‚Çø*' \
                                    f'\n*‚îú SAT {sat} ‚Çø*' \
                                    f'\n*‚îú USD {usd} $*' \
                                    f'\n*‚îî RUB {rub} ‚ÇΩ*'
                        kb = types.InlineKeyboardMarkup()
                        url_button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç',
                                                                url=f'https://t.me/{my_constants.nickname_bot}?start')
                        kb.add(url_button)
                        r = types.InlineQueryResultArticle(
                            id='1',
                            title='–í–∞—à –±–∞–ª–∞–Ω—Å',
                            description=balance,
                            input_message_content=types.InputTextMessageContent(
                                message_text=answer_text,
                                parse_mode="Markdown"),
                            thumb_url='https://cdn.icon-icons.com/icons2/2104/PNG/512/money_icon_129157.png',
                            thumb_height=48, thumb_width=78,
                            reply_markup=kb)
                        return bot.answer_inline_query(cache_time=2, inline_query_id=query.id, results=[r],
                                                       is_personal=True, switch_pm_text='–ø–µ—Ä–µ–π—Ç–∏',
                                                       switch_pm_parameter='r')
                    except Exception as e:
                        m = query.id
                        parse_mode = f'*–û—à–∏–±–∫–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞:* `{e}` \n\n*QUERY.ID* `{m}`'
                        bot.send_message(chat_id=my_constants.debug_account, text=parse_mode)
                elif re.compile(r'^(\d+|\d+.\d+)\s\w{3}$').findall(query.query):
                    try:
                        m = query.query
                        summ, currency = m.split()
                        v = ('sat', 'btc', 'rub', 'usd', 'eur', 'gdp', 'jpy', 'chy', 'cad', 'aud', 'nzd', 'brl', 'chf', 'sek', 'dkk', 'isk', 'pln', 'hkd', 'krw', 'sgd', 'thb', 'twd')
                        if currency in v:
                            btc_balance = select_db.fin.now_balance(user_id=query.from_user.id)
                            if currency == 'btc':
                                balance = float(select_db.fin.now_balance(user_id=query.from_user.id)) / 100000000.0
                                summ_btc = int(float(summ) * 100000000.0)
                                c = int(summ_btc) / 100
                                c_net = c * float(my_constants.size_commission_network_in_procent)
                                c_my = c * float(my_constants.size_commission_bot_in_procent)
                                size_com_n = int(c_net)
                                size_com_b = int(c_my)
                                size_com_n_in_cur = float(size_com_n) / 100000000.0
                                size_com_b_in_cur = float(size_com_b) / 100000000.0
                            elif currency == 'sat':
                                balance = select_db.fin.now_balance(user_id=query.from_user.id)
                                summ_btc = int(summ)
                                c = int(summ_btc) / 100
                                c_net = c * float(my_constants.size_commission_network_in_procent)
                                c_my = c * float(my_constants.size_commission_bot_in_procent)
                                size_com_n = int(c_net)
                                size_com_b = int(c_my)
                                size_com_n_in_cur = size_com_n
                                size_com_b_in_cur = size_com_b
                            elif currency != 'sat' and currency != 'btc':
                                summ_btc = int(currency_to_satoshi(summ, currency))
                                key = Key(select_db.private_key(user_id=query.from_user.id))
                                balance = key.get_balance(currency)
                                c = int(summ_btc) / 100
                                c_net = c * float(my_constants.size_commission_network_in_procent)
                                c_my = c * float(my_constants.size_commission_bot_in_procent)
                                size_com_n = int(c_net)
                                size_com_b = int(c_my)
                                size_com_n_in_cur = satoshi_to_currency(size_com_n, currency)
                                size_com_b_in_cur = satoshi_to_currency(size_com_b, currency)
                            if int(summ_btc) < int(btc_balance):
                                hash = generate_crypt(51)
                                add_db.transaction_address_and_id(sender_id=query.from_user.id, address_accept='empty', order=hash)
                                cursor = cur()
                                cursor.executescript(f'''UPDATE "TRANSACTION" set "summ_in_btc" = "{summ_btc}" WHERE "sender_id" = "{query.from_user.id}" and "address_accept" = "empty" and "commission_network" = "-" and "status" = "create" and "order_transaction" = "{hash}";
                                                         UPDATE "TRANSACTION" set "commission_network" = "{size_com_n}" WHERE "sender_id" = "{query.from_user.id}" and "summ_in_btc" = "{summ_btc}" and "address_accept" = "empty" and "commission_network" = "-" and "status" = "create" and "order_transaction" = "{hash}";
                                                         UPDATE "TRANSACTION" set "commission_bot" = "{size_com_b}" WHERE "commission_network" = "{size_com_n}" and "sender_id" = "{query.from_user.id}" and "summ_in_btc" = "{summ_btc}" and "address_accept" = "empty" and "status" = "create" and "order_transaction" = "{hash}";''')
                                db.commit()
                                text_description = f'–ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ç–∏ {my_constants.size_commission_network_in_procent}% {size_com_n_in_cur} {currency.upper()}' \
                                                   f'\n–ö–æ–º–∏—Å—Å–∏—è –±–æ—Ç–∞ {my_constants.size_commission_bot_in_procent}% {size_com_b_in_cur} {currency.upper()}'
                                answer_text = f'*–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ‚Çø{float(summ_btc) / 100000000.0} BTC*'
                                kb = types.InlineKeyboardMarkup()
                                url_button = types.InlineKeyboardButton(text='‚û°Ô∏è',
                                                                        url=f'https://t.me/{my_constants.nickname_bot}?start={hash}')
                                kb.add(url_button)
                                r = types.InlineQueryResultArticle(
                                    id='2',
                                    title='–ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥',
                                    description=text_description,
                                    input_message_content=types.InputTextMessageContent(
                                        message_text=answer_text,
                                        parse_mode="Markdown"),
                                    thumb_url='https://avatars.mds.yandex.net/get-zen_doc/3447231/pub_5ed8b47cff86d17c5267b7e6_5ed8b58e06957430d9e14b67/scale_1200',
                                    thumb_height=78, thumb_width=78,
                                    reply_markup=kb)

                                text_description = f'{balance} {currency.upper()}'
                                answer_text = f'*{balance} {currency.upper()}*'
                                b = types.InlineQueryResultArticle(
                                    id='6',
                                    title='–í–∞—à –±–∞–ª–∞–Ω—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ',
                                    description=text_description,
                                    input_message_content=types.InputTextMessageContent(
                                        message_text=answer_text,
                                        parse_mode="Markdown"),
                                    thumb_url='https://cdn.icon-icons.com/icons2/2104/PNG/512/money_icon_129157.png',
                                    thumb_height=48, thumb_width=78)

                                return bot.answer_inline_query(cache_time=2, inline_query_id=query.id,
                                                               results=[r, b], is_personal=True, switch_pm_text='–ø–µ—Ä–µ–π—Ç–∏',
                                                               switch_pm_parameter='r')

                            elif int(summ_btc) > int(btc_balance):
                                text_description = f'  '
                                answer_text = f'*–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤*\n\n–ü–æ–ø—Ä–æ–±—É–π —É–º–µ–Ω—å—à–∏—Ç—å —Å—É–º–º—É'
                                r = types.InlineQueryResultArticle(
                                    id='4',
                                    title='‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                                    description=text_description,
                                    input_message_content=types.InputTextMessageContent(
                                        message_text=answer_text,
                                        parse_mode="Markdown"),
                                    thumb_url='https://miro.medium.com/max/987/1*d6VmDP1oGlgu0JU2g5CQSQ.jpeg',
                                    thumb_height=78, thumb_width=78)
                                return bot.answer_inline_query(cache_time=2, inline_query_id=query.id,
                                                               results=[r], is_personal=True, switch_pm_text='–ø–µ—Ä–µ–π—Ç–∏',
                                                               switch_pm_parameter='r')
                    except Exception as e:
                        m = query.id
                        print(e)
                        print(query.query)
                        parse_mode = f'*–û—à–∏–±–∫–∞ –∏–∑ –∏–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞* `{e}` \n\n\n\n `{m}`'
                        bot.send_message(chat_id=my_constants.debug_account, text=parse_mode)
            elif select_db.check_id_in_db(id=query.from_user.id) is False:
                text_description = f' –ü—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é üëÜüèª'
                answer_text = f'*–ü–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏*üëáüèª'
                kb = types.InlineKeyboardMarkup()
                url_button = types.InlineKeyboardButton(text='–ó–∞–ø—É—Å—Ç–∏—Ç—å ‚û°',
                                                        url=f'https://t.me/{my_constants.nickname_bot}?start')
                kb.add(url_button)
                r = types.InlineQueryResultArticle(
                    id='3',
                    title='–Ø —Ç–µ–±—è —Ä–∞–Ω—å—à–µ –Ω–µ –≤–∏–¥–µ–ª...',
                    description=text_description,
                    input_message_content=types.InputTextMessageContent(
                        message_text=answer_text,
                        parse_mode="Markdown"),
                    thumb_url='https://www.paved.com/blog/wp-content/uploads/2018/05/Blog-Title_-How-to-Write-a-Welcome-Email-Series-And-Why-Your-Newsletter-Needs-One.png',
                    thumb_height=48, thumb_width=48,
                    reply_markup=kb)
                return bot.answer_inline_query(cache_time=2, inline_query_id=query.id, results=[r], switch_pm_text='–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
                                                       switch_pm_parameter='r')
        handler_query(query)


    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        bot.send_message(chat_id=my_constants.debug_account, text=f'*–û—à–∏–±–∫–∞:*\n`{e}`\n\n-----------\n–ë–æ—Ç —Å–Ω–æ–≤–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç.')

